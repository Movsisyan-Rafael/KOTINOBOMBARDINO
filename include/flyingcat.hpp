#pragma once

#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <memory>

/**
 * \brief Класс представляющий баф.
 */
class Buff {
public:
  /**
   * \brief Тип бафа.
   *
   * Это свойство хранит тип бафа.
   *
   */
  std::string type;

  /**
   * \brief Спрайт бафа.
   *
   * Это свойство хранит спрайт бафа.
   *
   */
  std::shared_ptr<sf::Sprite> sprite;

  /**
   * \brief Конструктор класса Buff.
   *
   * Конструктор класса Buff.
   *
   * \param typ Тип бафа.
   * \param sprt Спрайт бафа.
   */
  Buff(std::string typ, std::shared_ptr<sf::Sprite> sprt);
};

/**
 * \brief Класс представляющий частицу.
 */
class Particle {
public:
  /**
   * \brief Тип частицы.
   *
   * Это свойство хранит тип частицы.
   *
   */
  std::string type;

  /**
   * \brief Время жизни частицы.
   *
   * Это свойство хранит время жизни частицы.
   *
   */
  int lifetime;

  /**
   * \brief Скорость частицы по X.
   *
   * Это свойство хранит скорость частицы по X.
   *
   */
  int velX;

  /**
   * \brief Скорость частицы по Y.
   *
   * Это свойство хранит скорость частицы по Y.
   *
   */
  int velY;

  /**
   * \brief Скорость частицы в случайном направлении.
   *
   * Это свойство хранит скорость частицы в случайном направлении.
   *
   */
  int velRand;

  /**
   * \brief Спрайт частицы.
   *
   * Это свойство хранит спрайт частицы.
   *
   */
  std::shared_ptr<sf::Sprite> sprite;

  /**
   * \brief Конструктор класса Particle.
   *
   * Конструктор класса Particle.
   *
   * \param typ Тип частицы.
   * \param lftime Время жизни частицы.
   * \param vlX Скорость частицы по X.
   * \param vlY Скорость частицы по Y.
   * \param vlRand Скорость частицы в случайном направлении.
   * \param sprt Спрайт частицы.
   */
  Particle(std::string typ, int lftime, int vlX, int vlY, int vlRand,
           std::shared_ptr<sf::Sprite> sprt);
};

/**
 * \brief Класс всей игры.
 */
class FlyingCat {

  /**
   * \brief Объект окна игры.
   *
   * Этот объект отвечает за управление окном игры.
   *
   */
  std::shared_ptr<sf::RenderWindow> window;

  /**
   * \brief Переменная скорости игрока по оси Y.
   *
   * Эта переменная хранит текущую скорость игрока по оси Y.
   *
   */
  float velY;

  /**
   * \brief Переменная ускорения игрока по оси Y.
   *
   * Эта переменная хранит текущее ускорение игрока по оси Y.
   *
   */

  float accY;

  /**
   * \brief Переменная ускорения игрока по оси Y.
   *
   * Эта переменная хранит текущее ускорение игрока по оси Y.
   *
   */

  /**
   * \brief Переменная скорости игры.
   *
   * Эта переменная хранит текущую скорость игры. Скорость игры со временем
   * увеличивается.
   *
   */
  float speed;

  /**
   * \brief Переменная максимального счёта.
   *
   * Эта переменная хранит в себе максимальный счёт.
   *
   */
  int maxScore;

  /**
   * \brief Переменная предыдущего счёта.
   *
   * Эта переменная хранит в себе предыдущий счёт счёт.
   *
   */
  int lastScore;

  /**
   * \brief Переменная сдвига заднего плана.
   *
   * Эта переменная хранит в себе текущий сдвиг заднего плана, нужный для его
   * анимации.
   *
   */
  int backgroundOffset;

  /**
   * \brief Переменная для счётчика приманки.
   *
   * Эта переменная хранит в себе текущее значение счётчика приманки. Приманка
   * дейстивует когда значение больше 0.
   *
   */
  int baitEffect;

  /**
   * \brief Переменная для счётчика испольщования подушек.
   *
   * Эта переменная хранит в себе текущее значение счётчика использования
   * подушек. Подушка отталкивает игрока, когда значение больше 0.
   *
   */
  int pillowCooldown;

  /**
   * \brief Переменная для счётчика появления подушек.
   *
   * Эта переменная хранит в себе текущее значение счётчика появления
   * подушек. Когда счётчик заполняется, появляется подушка и он обнуляется.
   *
   */
  int pillowSpawnCounter;

  /**
   * \brief Переменная для счётчика появления рыбы.
   *
   * Эта переменная хранит в себе текущее значение счётчика появления
   * рыбы. Когда счётчик заполняется, появляется рыба и он обнуляется.
   *
   */
  int fishSpawnCounter;

  /**
   * \brief Переменная для счётчика появления бафов.
   *
   * Эта переменная хранит в себе текущее значение счётчика появления
   * бафов. Когда счётчик заполняется, появляется баф и он обнуляется.
   *
   */
  int buffsSpawnCounter;

  /**
   * \brief Переменная для счётчика появления частиц игрока.
   *
   * Эта переменная хранит в себе текущее значение счётчика появления
   * частиц игрока. Когда счётчик заполняется, появляется частица и он
   * обнуляется.
   *
   */
  int catParticlesCounter;

  /**
   * \brief Переменная для счётчика паралича.
   *
   * Эта переменная хранит в себе текущее значение счётчика действия паралича.
   * Паралич действует, когда значение больше 0.
   *
   */
  int cloudParalysis;

  /**
   * \brief Текстура заднего плана.
   *
   * Эта текстура хранит изображение заднего плана.
   *
   */
  sf::Texture backgroundTexture;

  /**
   * \brief Текстура игрока.
   *
   * Эта текстура хранит изображение игрока.
   *
   */
  sf::Texture catTexture;

  /**
   * \brief Текстура рыбы.
   *
   * Эта текстура хранит изображение рыбы.
   *
   */
  sf::Texture fishTexture;

  /**
   * \brief Текстура родушки.
   *
   * Эта текстура хранит изображение подушки.
   *
   */
  sf::Texture pillowTexture;

  /**
   * \brief Текстура частицы.
   *
   * Эта текстура хранит изображение частицы.
   *
   */
  sf::Texture catParticleTexture, sparkParticleTexture, crumbsParticleTexture,
      featherParticleTexture;

  /**
   * \brief Текстура бафа или дебафа.
   *
   * Эта текстура используется для бафа или дебафа.
   *
   */
  sf::Texture cloudTexture, bonusTexture, baitTexture, mineTexture,
      presentTexture, starTexture, spiderTexture;

  /**
   * \brief Спрайт заднего плана.
   *
   * Этот спрайт используется для анимированного заднего плана.
   *
   */
  std::shared_ptr<sf::Sprite> background;

  /**
   * \brief Спрайт игрока.
   *
   * Этот спрайт используется для игрока.
   *
   */
  std::shared_ptr<sf::Sprite> cat;

  /**
   * \brief Вектор со спрайтами рыбы.
   *
   * Этот вектор хранит текущие спрайты рыбы.
   *
   */
  std::vector<sf::Sprite> fishes;

  /**
   * \brief Вектор со спрайтами подушек.
   *
   * Этот вектор хранит текущие спрайты подушек.
   *
   */
  std::vector<sf::Sprite> pillows;

  /**
   * \brief Вектор с бобъектами класса Buff.
   *
   * Этот вектор хранит текущие баффы.
   *
   */
  std::vector<Buff> buffs;

  /**
   * \brief Флаг конца игры.
   *
   * Это флаг, отвечающий за то, идёт ли игра.
   *
   */
  bool gameover;

  /**
   * \brief Флаг блокировки мыши.
   *
   * Это флаг, отвечающий за то, можно ли прыгнуть по нажатию мыши.
   *
   */
  bool mouselock;

  /**
   * \brief Флаг нала игры.
   *
   * Это флаг, отвечающий за то, началась ли игра.
   *
   */
  bool started;

  /**
   * \brief Основной шрифт.
   *
   * Шрифт использующийся во всём тексте в игре.
   *
   */
  sf::Font font;

  /**
   * \brief Текст экрана поражения.
   *
   * Этот текст объясняет как начать игруц заново, отображает счёт, прошлый счёт
   * и лучший счёт, отображается при поражении.
   *
   */
  std::shared_ptr<sf::Text> gameoverText;

  /**
   * \brief Текст счёта.
   *
   * Этот текст показывает текущий счёт, отображается во время игры.
   *
   */
  std::shared_ptr<sf::Text> scoreText;

  /**
   * \brief Текст количества рыбы.
   *
   * Этот текст показывает текущее количество рыбы, отображается во время игры.
   *
   */
  std::shared_ptr<sf::Text> fishText;

  /**
   * \brief Текст начала игры.
   *
   * Этот текст объясняет как начать игру, отображается перед первой попыткой.
   *
   */
  std::shared_ptr<sf::Text> startText;

  /**
   * \brief Буффер звука.
   *
   * Этот буффер хранит звук для его воспроизведения в игре.
   *
   */
  std::shared_ptr<sf::SoundBuffer> biteSoundBuffer, bigBiteSoundBuffer,
      bawongSoundBuffer, jumpSoundBuffer, baitSoundBuffer, explosionSoundBuffer,
      lightningSoundBuffer, presentSoundBuffer, starSoundBuffer,
      fallSoundBuffer, spiderSoundBuffer, musicSoundBuffer;

  /**
   * \brief Объект для воспроизведения звука.
   *
   * Этот объект нужен для воспроизведения звука.
   *
   */
  std::shared_ptr<sf::Sound> biteSound, bigBiteSound, bawongSound, jumpSound,
      baitSound, explosionSound, lightningSound, presentSound, starSound,
      fallSound, spiderSound, musicSound;

protected:
  /**
   * \brief Функция смерти игрока.
   *
   * Эта функция срабатывает при смерти игрока, записывает максимальный счёт,
   * предыдущий счёт и изменяет текст экрана поражения.
   *
   */
  void dead();

  /**
   * \brief Функция обработки соьбытий.
   *
   * Эта функция обрабатывает события, такие как нажатие кнопки мыши или клавиши
   * клавиатуры.
   *
   */
  void events();

  /**
   * \brief Функция системы частиц.
   *
   * Эта функция отвечает за работу частиц.
   *
   */
  void particleSystem();

  /**
   * \brief Функция отрисовки.
   *
   * Эта функция отображает на игране игровые объекты и текст.
   *
   */
  void draw();

  /**
   * \brief Функция игрового цикла.
   *
   * Эта функция отвечает за вызов функций всех механик игры.
   *
   */
  void game();

  /**
   * \brief Функция системы рыбы.
   *
   * Эта функция отвечает за появление рыбы и взаимодействие игрока с рыбой.
   *
   */
  void fishSystem();

  /**
   * \brief Функция системы подушек.
   *
   * Эта функция отвечает за появление подушек и взаимодействие игрока с ними.
   *
   */
  void pillowsSystem();

  /**
   * \brief Функция системы бафов.
   *
   * Эта функция отвечает за появление бафов или дебафов и взаимодействие игрока
   * с ними.
   *
   * Бафы: приманка, куча рыьбы, звезда, подарок.
   * Дебафы: мина, туча, паук.
   *
   */
  void buffsSystem();

  /**
   * \brief Функция анимации заднего плана.
   *
   * Эта функция отвечает за движение заднего плана.
   *
   */
  void backAnim();

  /**
   * \brief Функция физики игрока.
   *
   * Эта функция отвечает за гравитацию, скорость, ускорение игрока.
   *
   */
  void catPhysics();

  /**
   * \brief Функция рестарта.
   *
   * Эта функция заново запускает игру и сбрасывает игровую карту.
   *
   */
  void restart();

  /**
   * \brief Функция прыжка.
   *
   * Эта функция заставляет игрока прыгнуть.
   *
   */
  void jump();

public:
  /**
   * \brief Вектор с частицами.
   *
   * Этот вектор хранит текущие частицы.
   *
   */
  std::vector<Particle> particles;

  /**
   * \brief Переменная счёта.
   *
   * Эта переменная хранит в себе текущий счёт.
   *
   */
  int score;

  /**
   * \brief Переменная количества рыбы.
   *
   * Эта переменная хранит в себе текущее количество рыбы.
   *
   */
  int fishCount;

  /**
   * \brief Добавляет delta к значению количества рыбы.
   *
   * Эта функция принимает целое число и добавляет его к значению количества
   * рыбы.
   *
   * \param delta Значение, добавляемое к количетсву рыбы.
   */
  void changeFish(int delta);

  /**
   * \brief Добавляет delta к значению количества счёта.
   *
   * Эта функция принимает целое число и добавляет его к значению количества
   * счёта.
   *
   * \param delta Значение, добавляемое к количетсву счёта.
   */
  void changeScore(int delta);

  /**
   * \brief Метод расчёта угла игрока.
   *
   * Эта функция возвращает нужный угол поворота игрока.
   *
   * \param x Скорость по оси X;
   *
   * \param y Скорость по оси Y;
   *
   */
  float calculateRotation(float x, float y);

  /**
   * \brief Метод расчёта случайного движения.
   *
   * Эта функция возвращает нужный вектор случайного движения частицы.
   *
   * \param r Максимальный радиус;
   *
   */
  sf::Vector2f calculateRandMove(int r);

  /**
   * \brief Функция создания пучка частиц.
   *
   * Эта функция создаёт пучёк из заданного кол-ва частиц с заданными
   * параметрами.
   *
   */
  void emitParticles(int amount, std::string type, int lifetime,
                     int velFromCenter, int velX, int velY, int velRand,
                     sf::Vector2f position);

  /**
   * \brief Стандартный конструктор класса.
   */
  FlyingCat();

  /**
   * \brief Метод, запускающий игру.
   */
  void run();
};
